version: "3.8"

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
    image: trinity/nginx
    restart: always
    ports:
      - "4242:4242"
      - "7000:7000"
      - "9000:9000"
    environment:
      - FRONT_PORT=${FRONTEND_PORT}
      - FRONT_HOST="${SERVER_FRONTEND_IP}"
      - NGINX_PORT=${NGINX_PORT}
      - NGINX_HOST="transcendence"
      - PONG_PORT=${PONG_PORT}
      - PONG_HOST=pong
      - WSGI_TRANSCENDENCE_PORT=8000
      - WSGI_TRANSCENDENCE_HOST=gunicorn
      - ASGI_TRANSCENDENCE_PORT=8000
      - ASGI_TRANSCENDENCE_HOST=django
    volumes:
      - transcendence_static:/var/www/transcendence/static
      - transcendence_media:/var/www/transcendence/media
      - pong_static:/var/www/pong/static
      - nginx_template:/etc/nginx/templates
      - ssl_certs:/etc/nginx/certs
      - frontend:/var/www/frontend
    networks:
      - nginx-net
    depends_on:
      - django
      - pong


  django:
    container_name: django
    build:
      context: ./django
    image: trinity/django
    restart: always
    expose:
      - "8000"
    volumes:
      - django:/etc/develop
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
    networks:
      - nginx-net
      - postgres-net
    depends_on:
      postgres:
        condition: service_healthy


  gunicorn:
    container_name: gunicorn
    build:
      context: ./gunicorn
    image: trinity/gunicorn
    restart: always
    expose:
      - "8000"
    volumes:
      - django:/etc/develop
      - transcendence_static:/etc/develop/static
      - transcendence_media:/etc/develop/images
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
    networks:
      - nginx-net
      - postgres-net
    depends_on:
      postgres:
        condition: service_healthy


  postgres:
    container_name: postgres
    build:
      context: ./postgres
    image: trinity/postgres
    restart: always
    expose:
      - "$DB_PORT"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p$DB_PORT", "-h127.0.0.1", "-d$DB_NAME", "-U$DB_USER"]
      retries: 10
      interval: 5s
      start_interval: 3s
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA=${PGDATA}
    networks:
      - postgres-net


  pong:
    container_name: pong
    build:
      context: ./pong
    image: trinity/pong
    restart: always
    expose:
      - "7000"
    volumes:
      - pong:/etc/develop
      - pong_static:/static
    environment:
      - PROJECT_NAME=${PONGAPP_NAME}
      - DB_USER=${PONGDB_USER}
      - DB_NAME=${PONGDB_NAME}
      - DB_PASSWORD=${PONGDB_PASSWORD}
      - DB_HOST=${PONGDB_HOST}
      - DB_PORT=${PONGDB_PORT}
    networks:
      - nginx-net
      - pongdb-net
    depends_on:
      pongdb:
        condition: service_healthy


  cron:
    container_name: cron
    build:
      context: ./cron
    image: trinity/cron
    restart: always
    networks:
      - postgres-net
    depends_on:
      postgres:
        condition: service_healthy


  pongdb:
    container_name: pongdb
    build:
      context: ./pongdb
    image: trinity/pongdb
    restart: always
    expose:
      - "$PONGDB_PORT"
    volumes:
      - pongdb:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p$PONGDB_PORT", "-h127.0.0.1", "-d$PONGDB_NAME", "-U$PONGDB_USER"]
      retries: 10
      interval: 5s
      start_interval: 3s
    environment:
      - POSTGRES_PASSWORD=${PONGDB_PASSWORD}
      - POSTGRES_USER=${PONGDB_USER}
      - POSTGRES_DB=${PONGDB_NAME}
      - PGDATA=${PGDATA}
    networks:
      - pongdb-net


volumes:
  frontend:
    name: "frontend"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/frontend"
  transcendence_static:
    name: "transcendence_static"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/static/transcendence_static"
  transcendence_media:
    name: "transcendence_media"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/media/"
  pong_static:
    name: "pong_static"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/static/pong_static"
  nginx_template:
    name: "nginx_template"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/srcs/nginx/conf"
  ssl_certs:
    name: "ssl_certs"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/certs"
  django:
    name: "django"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/django"
  pong:
    name: "pong"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/pong"
  postgres:
    name: "postgres"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/postgres"
  pongdb:
    name: "pongdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/pongdb"

networks:
  nginx-net:
    name: "nginx-net"

  postgres-net:
    name: "postgres-net"

  pongdb-net:
    name: "pongdb-net"
