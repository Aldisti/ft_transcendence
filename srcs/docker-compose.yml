version: "3.8"

services:
  django:
    container_name: django
    build:
      context: ./transcendence
    user: ${UID}:${GID}
    image: trinity/transcendence
    restart: always
    ports:
      - "8000-8020:8000-8020"
    volumes:
      - django:/home/$USERNAME/develop
    env_file:
      - ./transcendence/.env
    environment:
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - EXCHANGE=${EXCHANGE}
      - NTF_ROUTING_KEY=${NTF_ROUTING_KEY}
      - EMAIL_ROUTING_KEY=${EMAIL_ROUTING_KEY}
      - VHOST_NTF=${VHOST_NTF}
      - RABBIT_HEARTBEAT=${RABBIT_HEARTBEAT}
      - RABBIT_BC_TIMEOUT=${RABBIT_BC_TIMEOUT}
      - CHAT_HOST=chat
      - CHAT_PORT=8000
      - NTF_HOST=ntf
      - NTF_PORT=8000
      - PONG_HOST=pong
      - PONG_PORT=8000
      - AUTH_HOST=auth
      - AUTH_PORT=8000
    healthcheck:
      test: curl -sf http://localhost:8000/auth/retrieve/public-key/ -o /dev/null
      retries: 3
      interval: 5m
      start_period: 10s
      start_interval: 5s
    networks:
      - django-net
      - postgres-net
      - rabbit-net
    depends_on:
      postgres:
        condition: service_healthy
      auth:
        condition: service_healthy


  auth:
    container_name: auth
    build:
      context: ./auth
    user: ${UID}:${GID}
    image: trinity/auth
    restart: unless-stopped
    healthcheck:
      test: curl -sf http://localhost:8000/auth/retrieve/public-key/ -o /dev/null
      retries: 3
      interval: 5m
      start_period: 15s
      start_interval: 5s
    volumes:
      - auth:/home/${USERNAME}/develop
    env_file:
      - ./auth/.env
    environment:
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
    networks:
      - django-net
      - authdb-net
    depends_on:
      authdb:
        condition: service_healthy


  pong:
    container_name: pong
    build:
      context: ./pong
    user: ${UID}:${GID}
    image: trinity/pong
    restart: always
    ports:
      - "7000-7020:8000-8020"
    volumes:
      - pong:/home/$USERNAME/develop
    env_file:
      - ./pong/.env
    environment:
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
    networks:
      - django-net
      - pongdb-net
    depends_on:
      pongdb:
        condition: service_healthy
        restart: true
      auth:
        condition: service_healthy


  chat:
    container_name: chat
    build:
      context: ./chat
    user: ${UID}:${GID}
    image: trinity/chat
    restart: always
    ports:
      - "9001:8000"
    volumes:
      - chat:/home/$USERNAME/develop
    env_file:
      - ./chat/.env
    environment:
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - EXCHANGE=${EXCHANGE}
      - NTF_ROUTING_KEY=${NTF_ROUTING_KEY}
      - VHOST_NTF=${VHOST_NTF}
      - RABBIT_HEARTBEAT=${RABBIT_HEARTBEAT}
      - RABBIT_BC_TIMEOUT=${RABBIT_BC_TIMEOUT}
    networks:
      - django-net
      - chatdb-net
      - rabbit-net
    depends_on:
      chatdb:
        condition: service_healthy


  ntf:
    container_name: ntf
    build:
      context: ./ntf
    user: ${UID}:${GID}
    image: trinity/ntf
    restart: always
    ports:
      - "9000:8000"
    volumes:
      - ntf:/home/$USERNAME/develop
    env_file:
      - ./ntf/.env
    environment:
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
    networks:
      - django-net
      - ntfdb-net
    depends_on:
      ntfdb:
        condition: service_healthy


  cron:
    container_name: cron
    build:
      context: ./cron
    image: trinity/cron
    restart: always
    networks:
      - postgres-net
      - django-net
    depends_on:
      postgres:
        condition: service_healthy


  ntf_listener:
    container_name: ntf_listener
    build:
      context: ./ntf_listener
    image: trinity/ntf_listener
    restart: always
    environment:
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - EXCHANGE=${EXCHANGE}
      - NTF_ROUTING_KEY=${NTF_ROUTING_KEY}
      - VHOST=${VHOST_NTF}
      - QUEUE_NAME=${NTF_QUEUE}
      - THREAD=${THREAD}
    networks:
      - rabbit-net
      - django-net
    depends_on:
      rabbit_mq:
        condition: service_healthy


  email_listener:
    container_name: email_listener
    build:
      context: ./email_listener
    image: trinity/email_listener
    restart: always
    environment:
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - EXCHANGE=${EXCHANGE}
      - EMAIL_ROUTING_KEY=${EMAIL_ROUTING_KEY}
      - THREAD=${THREAD}
      - QUEUE_NAME=${EMAIL_QUEUE}
      - VHOST=${VHOST_NTF}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    networks:
      - rabbit-net
      - django-net
    depends_on:
      rabbit_mq:
        condition: service_healthy


  rabbit_mq:
    container_name: rabbit_mq
    build:
      context: ./rabbit_mq
    image: trinity/rabbit_mq
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - rabbit-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      retries: 10
      interval: 10s
      start_interval: 20s


  postgres:
    container_name: postgres
    image: trinity/postgres
    restart: always
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -p$$POSTGRES_PORT -d$$POSTGRES_DB -U$$POSTGRES_USER"
      retries: 10
      interval: 2s
      start_interval: 3s
    env_file:
      - ./postgres/.env_django
    environment:
      - PGDATA=${PGDATA}
    networks:
      - postgres-net


  authdb:
    container_name: authdb
    image: trinity/postgres
    user: ${UID}:${GID}
    restart: always
    volumes:
      - authdb:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -p$$POSTGRES_PORT -d$$POSTGRES_DB -U$$POSTGRES_USER"
      retries: 3
      interval: 2s
      start_interval: 3s
    env_file:
      - ./postgres/.env_auth
    environment:
      - PGDATA=${PGDATA}
    networks:
      - authdb-net


  chatdb:
    container_name: chatdb
    image: trinity/postgres
    restart: always
    volumes:
      - chatdb:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -p$$POSTGRES_PORT -d$$POSTGRES_DB -U$$POSTGRES_USER"
      retries: 10
      interval: 5s
      start_interval: 3s
    env_file:
      - ./postgres/.env_chat
    environment:
      - PGDATA=${PGDATA}
    networks:
      - chatdb-net


  ntfdb:
    container_name: ntfdb
    image: trinity/postgres
    restart: always
    volumes:
      - ntfdb:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -p$$POSTGRES_PORT -d$$POSTGRES_DB -U$$POSTGRES_USER"
      retries: 10
      interval: 5s
      start_interval: 3s
    env_file:
      - ./postgres/.env_ntf
    environment:
      - PGDATA=${PGDATA}
    networks:
      - ntfdb-net


  pongdb:
    container_name: pongdb
    image: trinity/postgres
    restart: always
    volumes:
      - pongdb:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -p$$POSTGRES_PORT -d$$POSTGRES_DB -U$$POSTGRES_USER"
      retries: 10
      interval: 2s
      start_interval: 3s
    env_file:
      - ./postgres/.env_pong
    environment:
      - PGDATA=${PGDATA}
    networks:
      - pongdb-net


volumes:
  django:
    name: "django"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/django"

  pong:
    name: "pong"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/pong"

  chat:
    name: "chat"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/chat"

  auth:
    name: "auth"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/authentication"

  ntf:
    name: "ntf"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/ntf"

  postgres:
    name: "postgres"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/postgres"

  pongdb:
    name: "pongdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/pongdb"

  chatdb:
    name: "chatdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/chatdb"

  authdb:
    name: "authdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/authdb"

  ntfdb:
    name: "ntfdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/ntfdb"

networks:
  django-net:
    name: "django-net"

  postgres-net:
    name: "postgres-net"

  pongdb-net:
    name: "pongdb-net"

  chatdb-net:
    name: "chatdb-net"

  ntfdb-net:
    name: "ntfdb-net"

  rabbit-net:
    name: "rabbit-net"

  authdb-net:
    name: "authdb-net"
