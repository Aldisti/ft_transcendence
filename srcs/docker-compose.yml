version: "3.8"

services:
  django:
    container_name: django
    build:
      context: ./django
      args:
        UID: ${UID}
        GID: ${GID}
        USERNAME: ${USERNAME}
    image: trinity/django
    restart: always
    ports:
      - "8000-8020:8000-8020"
    volumes:
      - django:/etc/develop
#    healthcheck:
#      test: curl -sf http://localhost:8000/auth/retrieve/public-key/ -o /dev/null
#      retries: 3
#      interval: 5m
#      start_period: 10s
#      start_interval: 5s
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DB_USER=${DB_USER}
      - DB_NAME=${DB_NAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}

      # microservices vars
      - CHAT_HOST=chat
      - CHAT_PORT=8000
      - NTF_HOST=ntf
      - NTF_PORT=8000
      - PONG_HOST=pong
      - PONG_PORT=8000
      - AUTH_HOST=auth
      - AUTH_PORT=8000

      # rabbitMq vars
      - RABBIT_PORT=5672
      - RABBIT_HOST=rabbit_mq
      - EXCHANGE=${EXCHANGE}
      - NTF_ROUTING_KEY=${NTF_ROUTING_KEY}
      - EMAIL_ROUTING_KEY=${EMAIL_ROUTING_KEY}
      - VHOST_NTF=${VHOST_NTF}
      - RABBIT_HEARTBEAT=${RABBIT_HEARTBEAT}
      - RABBIT_BC_TIMEOUT=${RABBIT_BC_TIMEOUT}
    networks:
      - django-net
      - postgres-net
      - rabbit-net
    depends_on:
      postgres:
        condition: service_healthy
      auth:
        condition: service_healthy


  auth:
    container_name: auth
    build:
      context: ./auth
      args:
        UID: ${UID}
        GID: ${GID}
        USERNAME: ${USERNAME}
    image: trinity/auth
    restart: unless-stopped
    healthcheck:
      test: curl -sf http://localhost:8000/auth/retrieve/public-key/ -o /dev/null
      retries: 3
      interval: 5m
      start_period: 10s
      start_interval: 5s
    ports:
      - "6969:8000"
    volumes:
      - auth:/home/${USERNAME}/develop
    environment:
      - PROJECT_NAME=${AUTH_APP_NAME}
      - DB_USER=${AUTH_DB_USER}
      - DB_NAME=${AUTH_DB_NAME}
      - DB_PASSWORD=${AUTH_DB_PASSWORD}
      - DB_HOST=${AUTH_DB_HOST}
      - DB_PORT=${AUTH_DB_PORT}
      - INTRA_ID=${INTRA_ID}
      - INTRA_SECRET=${INTRA_SECRET}
      - GOOGLE_ID=${GOOGLE_ID}
      - GOOGLE_SECRET=${GOOGLE_SECRET}
      - RSA_PRIVATE_KEY_PATH=${RSA_PRIVATE_KEY_PATH}
      - RSA_PUBLIC_KEY_PATH=${RSA_PUBLIC_KEY_PATH}
    networks:
      - django-net
      - authdb-net
    depends_on:
      authdb:
        condition: service_healthy
        restart: true


  pong:
    container_name: pong
    build:
      context: ./pong
    image: trinity/pong
    restart: always
    ports:
      - "7000-7020:8000-8020"
    volumes:
      - pong:/etc/develop
    environment:
      - PROJECT_NAME=${PONGAPP_NAME}
      - DB_USER=${PONGDB_USER}
      - DB_NAME=${PONGDB_NAME}
      - DB_PASSWORD=${PONGDB_PASSWORD}
      - DB_HOST=${PONGDB_HOST}
      - DB_PORT=${PONGDB_PORT}
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
    networks:
      - django-net
      - pongdb-net
    depends_on:
      pongdb:
        condition: service_healthy
        restart: true
      auth:
        condition: service_healthy


  chat:
    container_name: chat
    build:
      context: ./chat
    image: trinity/chat
    restart: always
    ports:
      - "9001:8000"
    volumes:
      - chat:/etc/develop
    environment:
      - PROJECT_NAME=${CHATAPP_NAME}
      - DB_USER=${CHATDB_USER}
      - DB_NAME=${CHATDB_NAME}
      - DB_PASSWORD=${CHATDB_PASSWORD}
      - DB_HOST=${CHATDB_HOST}
      - DB_PORT=${CHATDB_PORT}
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}

      # rabbitMq vars
      - RABBIT_PORT=5672
      - RABBIT_HOST=rabbit_mq
      - EXCHANGE=${EXCHANGE}
      - NTF_ROUTING_KEY=${NTF_ROUTING_KEY}
      - VHOST_NTF=${VHOST_NTF}
      - RABBIT_HEARTBEAT=${RABBIT_HEARTBEAT}
      - RABBIT_BC_TIMEOUT=${RABBIT_BC_TIMEOUT}
    networks:
      - django-net
      - chatdb-net
      - rabbit-net
    depends_on:
      chatdb:
        condition: service_healthy


  ntf:
    container_name: ntf
    build:
      context: ./ntf
    image: trinity/ntf
    restart: always
    ports:
      - "9000:8000"
    volumes:
      - ntf:/etc/develop
    environment:
      - PROJECT_NAME=${NTFAPP_NAME}
      - DB_USER=${NTFDB_USER}
      - DB_NAME=${NTFDB_NAME}
      - DB_PASSWORD=${NTFDB_PASSWORD}
      - DB_HOST=${NTFDB_HOST}
      - DB_PORT=${NTFDB_PORT}
      - SERVER_FRONTEND_IP=${SERVER_FRONTEND_IP}
    networks:
      - django-net
      - ntfdb-net
    depends_on:
      ntfdb:
        condition: service_healthy


  cron:
    container_name: cron
    build:
      context: ./cron
    image: trinity/cron
    restart: always
    networks:
      - postgres-net
    depends_on:
      postgres:
        condition: service_healthy


  ntf_listener:
    container_name: ntf_listener
    build:
      context: ./ntf_listener
    image: trinity/ntf_listener
    restart: always
    environment:
      - RABBIT_PORT=5672
      - RABBIT_HOST=rabbit_mq
      - EXCHANGE=${EXCHANGE}
      - NTF_ROUTING_KEY=${NTF_ROUTING_KEY}
      - THREAD=${THREAD}
      - QUEUE_NAME=${NTF_QUEUE}
      - VHOST=${VHOST_NTF}
    networks:
      - rabbit-net
      - django-net
    depends_on:
      rabbit_mq:
        condition: service_healthy


  email_listener:
    container_name: email_listener
    build:
      context: ./email_listener
    image: trinity/email_listener
    restart: always
    environment:
      - RABBIT_PORT=5672
      - RABBIT_HOST=rabbit_mq
      - EXCHANGE=${EXCHANGE}
      - EMAIL_ROUTING_KEY=${EMAIL_ROUTING_KEY}
      - THREAD=${THREAD}
      - QUEUE_NAME=${EMAIL_QUEUE}
      - VHOST=${VHOST_NTF}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    networks:
      - rabbit-net
      - django-net
    depends_on:
      rabbit_mq:
        condition: service_healthy


  rabbit_mq:
    container_name: rabbit_mq
    build:
      context: ./rabbit_mq
    image: trinity/rabbit_mq
    restart: always
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - rabbit-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      retries: 10
      interval: 10s
      start_interval: 20s


  postgres:
    container_name: postgres
    build:
      context: ./db
      args:
        UID: ${UID}
        GID: ${GID}
        USERNAME: ${USERNAME}
    image: trinity/db
#    image: postgres:16-bookworm
    restart: always
    expose:
      - "$DB_PORT"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p$DB_PORT", "-h127.0.0.1", "-d$DB_NAME", "-U$DB_USER"]
      retries: 10
      interval: 2s
      start_interval: 3s
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
      - PGDATA=${PGDATA}
    networks:
      - postgres-net


  authdb:
    container_name: authdb
    build:
      context: ./db
      args:
        UID: ${UID}
        GID: ${GID}
        USERNAME: ${USERNAME}
    image: trinity/db
#    image: postgres:16-bookworm
    user: ${UID}:${GID}
    restart: always
    volumes:
      - authdb:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p$AUTH_DB_PORT", "-h127.0.0.1", "-d$AUTH_DB_NAME", "-U$AUTH_DB_USER"]
      retries: 3
      interval: 2s
      start_interval: 3s
    environment:
      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}
      - POSTGRES_USER=${AUTH_DB_USER}
      - POSTGRES_DB=${AUTH_DB_NAME}
      - PGDATA=${PGDATA}
    networks:
      - authdb-net


  chatdb:
    container_name: chatdb
    build:
      context: ./db
      args:
        UID: ${UID}
        GID: ${GID}
        USERNAME: ${USERNAME}
    image: trinity/db
#    image: postgres:16-bookworm
    restart: always
    expose:
      - "$CHATDB_PORT"
    volumes:
      - chatdb:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p$CHATDB_PORT", "-h127.0.0.1", "-d$CHATDB_NAME", "-U$CHATDB_USER"]
      retries: 10
      interval: 5s
      start_interval: 3s
    environment:
      - POSTGRES_PASSWORD=${CHATDB_PASSWORD}
      - POSTGRES_USER=${CHATDB_USER}
      - POSTGRES_DB=${CHATDB_NAME}
      - PGDATA=${PGDATA}
    networks:
      - chatdb-net


  ntfdb:
    container_name: ntfdb
    build:
      context: ./db
      args:
        UID: ${UID}
        GID: ${GID}
        USERNAME: ${USERNAME}
    image: trinity/db
#    image: postgres:16-bookworm
    restart: always
    expose:
      - "$NTFDB_PORT"
    volumes:
      - ntfdb:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p$NTFDB_PORT", "-h127.0.0.1", "-d$NTFDB_NAME", "-U$NTFDB_USER"]
      retries: 10
      interval: 5s
      start_interval: 3s
    environment:
      - POSTGRES_PASSWORD=${NTFDB_PASSWORD}
      - POSTGRES_USER=${NTFDB_USER}
      - POSTGRES_DB=${NTFDB_NAME}
      - PGDATA=${PGDATA}
    networks:
      - ntfdb-net


  pongdb:
    container_name: pongdb
    build:
      context: ./db
      args:
        UID: ${UID}
        GID: ${GID}
        USERNAME: ${USERNAME}
    image: trinity/db
#    image: postgres:16-bookworm
    restart: always
    expose:
      - "$PONGDB_PORT"
    volumes:
      - pongdb:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-p$PONGDB_PORT", "-h127.0.0.1", "-d$PONGDB_NAME", "-U$PONGDB_USER"]
      retries: 10
      interval: 2s
      start_interval: 3s
    environment:
      - POSTGRES_PASSWORD=${PONGDB_PASSWORD}
      - POSTGRES_USER=${PONGDB_USER}
      - POSTGRES_DB=${PONGDB_NAME}
      - PGDATA=${PGDATA}
    networks:
      - pongdb-net


volumes:
  django:
    name: "django"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/django"

  pong:
    name: "pong"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/pong"

  chat:
    name: "chat"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/chat"

  auth:
    name: "auth"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/$AUTH_APP_NAME"

  ntf:
    name: "ntf"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/ntf"

  postgres:
    name: "postgres"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/postgres"

  pongdb:
    name: "pongdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/pongdb"

  chatdb:
    name: "chatdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/chatdb"

  authdb:
    name: "authdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/authdb"

  ntfdb:
    name: "ntfdb"
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "$PWD/data/ntfdb"

networks:
  django-net:
    name: "django-net"

  postgres-net:
    name: "postgres-net"

  pongdb-net:
    name: "pongdb-net"

  chatdb-net:
    name: "chatdb-net"

  ntfdb-net:
    name: "ntfdb-net"

  rabbit-net:
    name: "rabbit-net"

  authdb-net:
    name: "authdb-net"
